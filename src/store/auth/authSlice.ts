import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { fetchLogin } from '../../api/authAPI';

interface  AuthSlice {
    isAuthenticated: boolean,
    status: 'idle' | 'loading' | 'failed'
}

const initialState: AuthSlice = {
    isAuthenticated: false,
    status: 'idle',
}

export const loginAsync = createAsyncThunk(
    'auth/fetchAuth',
    async (isLogged: boolean) => {
      const response = await fetchLogin(true);
      console.log("Autenticado: ", response)
      // The value we return becomes the `fulfilled` action payload
      return response;
    }
);

export const uiSlice = createSlice({
    name: 'ui',
    initialState,
    reducers:{
        login: (state) =>{
            state.isAuthenticated = true;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.isAuthenticated = action.payload.data;
      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = 'failed';
      });
    },
})



export const { 
    login,
} = uiSlice.actions;

export const selectCount = (state: RootState) => state.isAuthenticated;

export default uiSlice.reducer;